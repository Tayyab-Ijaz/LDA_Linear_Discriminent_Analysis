# -*- coding: utf-8 -*-
"""LDA_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15hfOU0Q2LTGqylSMJbAtkFc90iRe5g0M
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import matthews_corrcoef
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
import os

# Set the input and output file paths
input_file = os.path.join("/content/drive/MyDrive","Gene_Data.csv")
output_file = os.path.join("/content/drive/MyDrive", "components_coordinates_all_PCs.csv")
# Load the dataset
dataset = pd.read_csv(input_file)

# One Square Matrix of features
x = dataset.iloc[:, 2:-1]
print(x.shape)
x.head()

from sklearn.preprocessing import LabelEncoder
import pandas as pd

le = LabelEncoder()
y = dataset.iloc[:, -1]
le.fit(y)

# Encode the labels using the original class labels
Y_array = le.transform(y)
#Y = pd.DataFrame(Y_array)

# Reverse the class labels
custom_labels = {0: 1, 1: 0}
Y_array = [custom_labels[label] for label in Y_array]
Y = pd.DataFrame(Y_array)
le.fit(Y)
Y_tran= le.transform(Y)
Y = pd.DataFrame(Y_tran)

print(y.value_counts())
print(Y.value_counts())

# Preprocess the dataset
sc = StandardScaler()
X = sc.fit_transform(x)

import numpy as np
import pandas as pd
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis


# Determine the maximum number of components
max_components = min(X.shape[1], np.unique(Y).shape[0] - 1)

# Apply Linear Discriminant Analysis
lda = LinearDiscriminantAnalysis(n_components=max_components)
X_lda = lda.fit_transform(X, Y)

# Create a DataFrame with the transformed features and labels
component_columns = ['LDA_Component_' + str(i + 1) for i in range(max_components)]
lda_df = pd.DataFrame(X_lda, columns=component_columns)

# Save the DataFrame as a CSV file
lda_df.to_csv('lda_componentsASD_ALL.csv', index=False)

print(f"Saved lda_df to /content/drive/MyDrive ")

lda_df.head()
